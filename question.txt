springcloud 包含组件及相关组件提问
答：openFeign，eureka，configServer，gateway,hystrix,ribbon
   openFeign是声明式RestFul网络请求客户端，讲过一些列的解析，最后会创建RequestTemplate对象，在RequestTemplate
   生成request过程中会调用所有RequestInterceptor对requestTemplate进行处理。调用requestInterceptor的apply方法。
   openFeign通过Encoder将object转化为http的请求body，Decoder将响应转化为对应的object。用户可以自定义自己的实现。

   hystrix为服务提供一种保护机制。断路器模式，一段时间内服务调用失败次数达到一定范围的时候，开起断路器，直接返回异常，
   不再真是调用，一段时间后，半开状态，允许一部分进行真实调用，当成功比例到达一定范围的时候，就打开断路器。
   在断路器打开时，执行fallback及为降级逻辑，减少资源消耗。hystrix一般使用线程池隔离的方式来保护系统资源。

   ribbon openFeign默认使用ribbon来做负载均衡。默认的负载均衡实现类为ZoneAwareLoadBalancer（可以配置eureka.client.availabilityZones指定zone），它是一个动态的负载均衡器
   ，内部updateListOfServer方法定定时(30s)更新服务列表，只获取状态为UP的服务。

Kafka等微服务组件

mysql分表实现、索引类型、B树

Eureka和zk的使用、优缺点，AP、CP、 集群问题及解决方案
答：eureka Client端，register-注册，续约-发送心跳30s，cancel-服务下线,getRegistry-获取服务列表等方法
    eureka server端，evict-服务剔除（自我保护时期不能剔除，剔除是均匀剔除，防止同一时间同一服务集群的服务全部过期剔除，剔除是定时任务60s执行一次）
    如果服务端出现大量的过期剔除，该server进入自我保护模式，注册表中的数据将不再被剔除。在client端，如果想eureka注册失败，会尝试其他eureka节点
    进行通信。sync-集群同步，为了维护server端注册表的一致，eureka server端需要同步注册表数据，同步时机-服务启动过程中，eureka server同时是一个
    eureka-client，会从其他server节点拉取注册表信息到本地的注册表，另一个时机是server端在对本地注册表更新的时候，会将操作同步到其他节点。
    eureka是趋于AP，可用性优先级更高。

    zookeeper做注册中心，服务提供者在zk上创建临时几点，服务消费者订阅该节点，获取服务列表，如果有变动，zk通过通知机制，消费端变更服务列表。
    zookeeper的角色有leader，follower，observer，如果leader网络不可达，那么整体的zk集群就要进入崩溃恢复阶段，该阶段的服务集群式不提供服务的，及
    不能注册服务，下线服务。整体的一致性约束体现的更强一些。



jvm内存分布，GC使用，参数优化， 方法区1.8调整

Spring加载源码解析、事务实现机制

java集合，HashMap内部实现，版本变化实现，扩容插入问题

分布式锁介绍及实现方式，分布式事务等

redis缓存更新的方式，数据不一致解决办法？
分别解释一下什么是缓存穿透、缓存击穿以及解决方案？
答：缓存穿透是缓存中没有，数据库中也没有。解决方案将请求key为键放入缓存，设置超时时间。避免暴力攻击。
    缓存击穿是缓存中没有，数据库中有，此时大量请求过来到数据库，库压力激增。解决方案，缓存预热，热点数据不设置过期时间。

redis持久化的方式以及区别？
答：AOF,RDB
      AOF是记录每次的写命令追加到文件尾部，默认每秒钟后台线程刷磁盘，会存在丢失最近1s的数据。文件过大的时候自动最小化命令集合重新文件。(appendonly.aof)
      RDB是数据快照，将某一时刻的数据存储到磁盘。持久化的过程是异步将快照写入临时文件，完成写入后替换原文件。（dump.rdb）

微服务当中数据一致性如何保证？
答： 时效性要求不高的，可以使用基于消息的最终一致性，rocketmq的事务消息，消费者端要保证接口的幂等，rocketmq会有重复消费的问题，rocketmq的消费模式是最少一次，如果消费端消费失败，会重新投递消息到broker。
       时效性要求高的，使用seata框架提供的AT或TCC，TCC会有空回滚，幂等，悬挂等问题。

Dubbo 核心的配置有哪些
答：registry，service，protocol，reference，application

Dubbo有哪几种负载均衡策略，默认是哪种？
答：failover默认方式失败自动切换
       failfast快速失败
       failsafe安全失败
       failback失败后后台线程重试

实际项目中如何实现会话共享，有什么解决方案，以及有什么区别
答：服务节点复制tomcat使用该方案，集中存储redis

JVM内存模型以及垃圾回收过程？简单介绍知道的几种垃圾回收算法？
答：堆，栈，方法区，本地方法区

谈一下HashMap中hash函数是怎么实现的？为什么不直接将key作为哈希值而是与高16位做异或运算？ 
答：算法  (n-1)&(h ^ (h >>> 16)) 
       右移16位，做异或运算，及保留了高16位，用高16位与低16位做异或运算（保留了高16位hashcode的特征，因为int是4字节，及高16位是0
       在做与运算的时候，原hashcod的高16位就没有作用了）
       直接运算，高16位的hashcode特征就没有了。这样降低了冲突的概率。
缓存如何保持同步？
答：数据双写的时候，先删除缓存记录，让读请求重置缓存中数据。在写操作发生的同时，如果有读请求过来，串行化读写请求，
      将读写请求放入先进先出队列，避免写请求还没提交，读请求获取了脏数据写入了缓存。还可以在优化，例如都是查看上个请求是否是都请求
      进行请求合并。减少逻辑。
      
针对缓存击穿、雪崩、穿透的应对方案
答：雪崩是大量的key同一时间过期了，在设置key过期时尽量离散写。
jvm发生fullGc问题排查


hashmap的哈希函数是怎么设计的？为什么要这样设计？为什么采用hashcode的高16位和低16位异或能降低hash碰撞？hash函数能不能直接用key的hashcode？
答：（n-1）&(hashcode^hashcode>>>16) 数组大小是一个int类型的正整数，及高16位都是0，如果直接做与运算，那么hashcode的高16位的值就不起作用
    。所以获取key的hashcode，然后右移16位，做异或运算，这样就是hashcode的高16为与自己的低16位做了一个异或运算。这样hashcode的高16位也参与了
    计算。
数据【1-9】分组，然后根据输入的数据，获取所在的对应的组？

多线程方式实现1-100的求和，说出设计思想？
答： 10个线程，size大小为10的int 数组存放每个线程的结果，用countDownLatch控制所有线程计算完毕后，由主线程计算int数组的和。

数据库分开分表的几种方案，用过哪些分库分表中间件？shardingJdbc和Mycat有什么区别？如何对数据库如何进行垂直拆分或水平拆分的？
答：shardingJdbc是sdk的方式耦合在代码里，mycat的mysql的代理服务，对应用无感知。
    垂直拆分是专库专用，把原来的一个大的应用拆分成小服务，每个服务独立一个库。
    水平拆分是把同一个表放到不同的库，解决的是单表数据过大的问题。

zookeeper是如何保证事务的顺序一致性的？
答：zookeeper集群中存在master、slave和observer，master负责事务操作，及所有的写请求都会发送到master，master处理事务请求会放入FIFO
    队列中，这样就保证了顺序一致性。

JVM垃圾回收过程是怎样的？
redis：
    redis的过期策略都有哪些？LRU代码如何实现？
    如何保证缓存与数据库的双写一致性？
    redis崩溃之后会怎么样？系统该如何应对这种情况？如何处理redis的穿透？


微服务如何拆分？服务边界如何划分？服务是不是拆的越细越好？


用过哪些分库分表中间件？现在有一个未分库分表的系统，未来要分库分表，如何设计才可以让系统从未分库分表动态切换到分库分表上？
JVM垃圾回收过程是怎样的？你知道哪几种垃圾收集器，各自的优缺点，重点讲下cms，g1？吞吐量优先和响应优先的垃圾收集器选择？

消息队列相关：
    kafka、rabbitmq、rocketmq都有什么优点和缺点啊?
    如何保证消息队列的高可用啊？
    如何保证消息的顺序性？
    有几百万消息持续积压几小时，说说怎么解决？

redis：
    redis的过期策略都有哪些？LRU代码如何实现？
    如何保证缓存与数据库的双写一致性？
    redis的哨兵原理能介绍一下么？
最近房抵贷系统平台，各租户的数据是如何实现隔离的？
	- 1 物理隔离，根据url，数据参数来路由到不同的db
	- 2 逻辑隔离，根据登陆人的系统参数，过滤不同的数据集

实际项目当中，和第三方直接是如何交互的，数据加密如何实现的？
	webservice 对称，非对称
	http
数据库分开分表的几种方案，用过哪些分库分表中间件？shardingJdbc和Mycat有什么区别？
	
现在有一个未分库分表的系统，未来要分库分表，如何设计才可以让系统从未分库分表动态切换到分库分表上？
	
如何保证消息的顺序性？rocketmq是如何实现顺序性的
答：同步发送消息，使用MessageQueueSelector一般基于业务号选择发送的队列这样保证了消息被发送到了同一个消息队列
   ，消费者的Listener使用MessageListenerOrderly顺序消费。
	
redis相关
    redis的主从复制原理能介绍一下？
    答：如果是第一次复制，及全量复制，master收到全量请求，发送master runId和offset给从节点
    从节点保存信息，master执行bgsave然后发送rdb文件，在发送过程中产生的数据，复制到repl_back_buffer缓冲区中
    发送缓冲区中数据。
    部分复制，从节点发送自己的offset和runid，master发送从offset到缓冲区队列尾的数据到slave

    redis如何实现的分布式锁？
    答：set if not exist 如果key存在不做任何操作，如果不存在进行set操作
    sentx抢锁后，expire前重启维护了，会怎么样？
    答：永久不能释放锁
    如果redis里有1亿个key，其中10万个key是以某个固定的已知的前缀开头的，怎么将它全部找出来？
    答：使用keys post-loan* 或者 scan 0 match post-loan* count 1000
    如果redis正在给线上提供服务，使用keys指令会有什么问题？
    答：会阻塞后面的请求。



微服务理解， springCloud与dubbo比对，dubbo的协议与超时，分布式事务
答：dubbo协议默认超时时间为1s

mysql索引类型，存储结构， 表锁，行锁
答：普通索引，唯一索引可以有空值，主键索引不能有空值，组合索引基于多个字段的索引
   存储结构为B+Tree
    表锁开销小，加锁快，锁定力度大，并发低
    行锁开销大，加锁慢，力度小，并发高


hashMap版本变化分析，扩容死锁

SpringBean的作用域
答：singleton，prototype，request，session，globalSession

dubbo与zk的工作原理。
答：dubbo的provider端的export会在zookeeper上创建一个临时节点，consumer会订阅该节点的信息，
如果客户端发生变化，zookeeper会通知consumer，consumer根据变化更新本地的服务列表。

dubbo的协议与超时，分布式事务，dubbo透传，dubbo filter
答：dubbo框架默认使用dubbo协议，该协议会在服务的基于netty创建服务，默认的超时时间是1s
dubbo的透传及为隐士传参，通过RpcContext设置参数，dubbo的filter是通过ProtocolFilterWapper类创建出来的
filter链，该类是通过dobbu的SPI的自动包装功能实现的，及dubbo的aop功能，所有推展接口的在创建的时候，如果存在
实现了该拓展接口，且构造函数同样是该接口类型的参数存在，就会被视为包装类，进行自动包装。在provider和consumer
执行invoke的时候都会先经过filter链。

JVM内存模型，类加载，类初始化顺序，对象初始化。

隐式类型转换与显示类型转换时的编译时异常与运行时异常
答：类似int 变 long 隐士， long 变 int 显示

RPC调用的阻塞与非阻塞。
答：大部分的RPC的调用都是非阻塞的，都是通过Future的方式来达到阻塞调用的，调用一般都是
请求后把Future放入map中，key为requestId，然后把当前线程阻塞一段时间。
服务的收到请求后处理业务，然后发送请求到客户端，客户端接收请求，获取requestId及客户端上个请求的唯一标识
然后从map获取Future，设置相应结果唤醒客户端阻塞的线程。在指定时间没有结果，则抛出timeoutException，一般
情况下，客户端都会起个定时，处理没有相应的Future。

Mq的选型，项目中的使用场景，延迟消息、事务消息、消息回溯、死信队列、消息积压。

SimpleDateFormat是否线程安全，如何做到线程安全。
答：线程不安全，加锁，局部变量，threadLocal

线程池基础，线程池与跑批调度优先级如何实现。
TreadLocal分析与使用场景。

eureka与zk的对比分析，zk的选举，eureka的服务信息不一致。
api调用保证原子性

String a = "abc"+123;是否异常，创建了几个对象，类型如何转换。
答：一个对象，编译阶段变成了"abc123"


在不同的框架中用到的IO模型，IO模型的了解，AIO,BIO,NIO的对比。

JVM内存模型，类加载，类初始化顺序，对象初始化。


Map类型的变量如何进行深度复制
答：putAll方法

LinkedHashMap和HashMap区别
答：linkedHashMap继承自HashMap，是有序的集合类。支持两种顺序，插入顺序，访问顺序
通过构造函数传入属性accessOrder属性来决定是否是访问顺序，默认是false及插入顺序
通过该属性可以实现lru算法。

ArrayList和linkedlist区别
答：一个基于数组，一个基于链接实现，已至index读取数据Array性能好，中间插入元素linked性能好。

针对于mysql数据库都做过哪些优化？

spring 的aop和ioc，动态代理
答：spring的核心是ioc和aop，aop又是基于ioc的spring实现ioc的方式是依赖注入。
ioc阶段是在对象实例化完成后,后置处理器AutowiredAnnotationBeanPostProcessor，
CommonAnnotationBeanPostProcessor会分别收集带有@Autowired,@value,@Inject,@Resource,@PostConstrct,
@PreDestry注解的信息，创建InjectionMetadata对象beanName为key存入集合。然后执行addSingletonFactory
方法，创建ObjectFactory对象，解决循环依赖问题，这个地方直接返回bean实列而是一个ObjectFactory对象是因为
需要注入的对象可能是代理对象，所以ObjectFactory的getObject会使用到AOP的逻辑。执行InjectionMetadata的
inject方法完成注入。依赖注入发生在bean 的实例化和初始化之间。bean的初始化阶段会设置aware类型属性，然后执行
beanPostProcess的初始化前方法，@PostConstrct标记的方法就是在这个时候被执行的。然后执行实现了initializingBean
接口的bean的afterPropertiesSet方法，调用initMethod。执行beanPostProcess的初始化后方法。

spring的aop是通过beanPostProcessor后置处理器实现的


微服务当中网关如何设计？限流如何实现？
答： API 生命周期管理功能 ，定义，测试，发布，版本管理，热升级，快速回滚。
安全防护，流量控制，请求统一校验，监控报警。无状态应用，优雅下线。动态路由。
例如springcloud gateway 官方提供了基于redish和lua脚本的令牌桶的方式限流，按照一定速率往队列里加入令牌。

spring cloud 组件 hystrix

数据库索引，回表
答：非主键索引需要查询多次成为回表查询。

https相关：一般
全局唯一编号生成
答：数据库自增主键，实现简单。uuid，作为主键性能差。redis自增序列。Twitter开源的算法snowflake等。

业务场景相关：
    多线程下载文件：
    答：基于nio的文件传输，使用channel的transferTo，该方法底层是使用零拷贝技术。



redis 数据结构
答：string，list，zset，set，hash

synchronized锁的升级降级。
答：锁的四种状态，无锁状态，偏向锁状态，轻量级锁状态，重量级锁状态。
   偏向锁，当线程访问代码块并获取锁对象的时候，在对象头中记录偏向锁的threadId，如果没有其它线程获取锁时，锁类型不变，
   如果有其他线程获取，撤销偏向锁，变成轻量级锁，其他线程自旋等待，到达一定次数后，轻量级锁会升级为重量级锁，重量级锁会把所有其他线程都阻塞，防止CPU空转。
   锁只有升级，没有降级。

HashMap的数据结构是怎样的？什么情况下会触发reHash，会有怎样的调整？
答：内部机构是数组+链表+红黑树的结构，在hashMap容量达到阈值的时候，会扩容，这样就触发了reHash。


2、HashTable和ConcurrentHashMap为什么不支持Null？
答：在多线程下不知道是没put进去还是该值就是null。

策略模式有什么优点？适合用什么场景？组合模式用于解决什么问题？
答：策略模式多种算法相似的情况下，用if..else的复杂和难以维护
    组合模式将对象组合成树形结构以表示"部分-整体"的层次结构
构建一个线程池有哪些参数？
答：核心线程数，最大线程数，线程空闲回收时间，时间单位，线程工厂对象，阻塞队列，拒绝策略
CAS的工作原理是怎样的？
答：cas是java里的乐观锁，对比交换，本地方法，操作系统支持,一般配合volatile修饰的属性，例如Atomic类型的原子操作。
ThreadLocal是怎样保存数据线程安全的？
答：每个线程复制一个副本。线程访问的都是自己的副本对象，没有共享资源，从而不会有线程安全问题
java垃圾回收是如何判定一个对象是可回收的？新生代和老年代的回收算法是怎样的？
答：基于可达性分析算法，从GCRoot对象作为起点，如果一个对象到GCRoot没有引用链，视为不可达，该对象就是可回收对象
    GCRoot 栈中引用的对象，方法区静态属性、常量引用的对象，本地方法栈中JNI引用的对象
    新生代使用复制算法，在新生代分为eden区，两个survivor区，将存活的对象从eden和survivor其中一个区域复制到一个空的survivor区域
    老年代使用标记整理算法。
Spring不能解决什么场景下的循环依赖？是如何怎样解决循环依赖的问题的？
答：不能解决基于构造方法场景下的依赖注入，例如在创建对象的时候发现有其他依赖对象。
    如果是属性注入，方法注入是可以的，在对象实例化后，spring会创建ObjectFactory对象，该对象存有实例化对象的引用。属性的注入是在对象初始化之前的。
    只要完成了对象的实例化，即可注入到依赖对象中。可后续完成初始化。创建ObjectFactory是因为依赖的对象可能是代理对象不是当前实例化的对象，及ObjectFactory会
    会触发AOP相关的功能。

Mysql InnoDB的索引结构是怎样的？什么是回表？
答：mysql索引结构是B+Tree，索引又有两种存储方式，聚簇和非聚簇，聚簇是行数据和主键B+树存储在一起、辅助B+树只存储辅助键和主键信息。
    非聚簇存储，主键索引和非主键索引存储方式一样
    回表是要两次从B+索引中取数据
    例如：基于主键查询所有列，这样就不会产生回表，因为在主键的索引树中能找到所有记录
          如果是基于唯一索引去查询所有列，那么除主键和索引列外的值索引树是不能找到的，然后需要从主键的索引树获取其他字段值。这样就产生了回表。

Mysql是如何实现主从同步的？InnoDB为什么需要一个binLog和一个redoLog来保证事务？
答： master slave建立链接，master 获取slave传送的index 和master的binlog的index比较，如果一致
就等待binlog的变化，如果不一致就把slave的index到binlog索引之间的数据发送给slave。slave把数据写入
relay文件中，记录当前写入的index，slave另一个线程会监测relay的变化，如果有改动就把变动内容转换为sql语句
执行到数据库中。
    binLog是mysql层面的，不论你的存储引擎是什么都需要binLog，是逻辑语句，binLog是事务提交后才更新
    ， 而redoLog是执行过程中就会有数据的更新， 是InnoDB的保证事务的。

可重复读解决了幻读问题吗？解决了什么场景下的幻读？
答：mysql的可重复读没有决绝幻读问题，只是解决了读数据的幻读问题。

redis有哪些方式可以解决缓存穿透问题？
答：DB中没有的数据，也基于key存储到redis，避免暴力攻击。

用过哪些java的锁？JVM会怎样进行锁升级？什么是自旋锁？
答：ReentrantLock,synchronized，当一个线程获取对象锁的时候，默认是偏向锁，如果没释放锁之前，又有一个线程来竞争锁，那么进行锁升级
    偏向锁，变成自旋锁，及cas的方式获取锁，比较耗CPU，如果自旋一定次数后，依旧没有获取到锁，则升级锁，变成重量级锁，重量级锁会把其他线程阻塞


ReadWriteLock是如何利用AQS的高低位的？分别用于存储什么？
答：aqs用state表示锁的占用状态，readWriteLock中存有两把锁，读锁和写锁
    读锁用state的高16为表示占用状态和重入次数，写锁用低16位表示占用状态和重入次数。






基础
    TCP和UDP的区别？
        TCP是面向连接的（在客户端和服务器之间传输数据之前要先建立连接），UDP是无连接的（发送数据之前不需要先建立连接）
        TCP提供可靠的服务（通过TCP传输的数据。无差错，不丢失，不重复，且按序到达）；UDP提供面向事务的简单的不可靠的传输。
        UDP具有较好的实时性，工作效率比TCP高，适用于对高速传输和实时性比较高的通讯或广播通信。随着网速的提高，UDP使用越来越多。
        没一条TCP连接只能是点到点的，UDP支持一对一，一对多和多对多的交互通信。
        TCP对系统资源要去比较多，UDP对系统资源要求比较少
        UDP程序结构更加简单
        TCP是流模式，UDP是数据报模式

    TCP协议如何保证可靠传输？
        TCP通过序列号、检验和、确认应答信号、重发控制、连接管理、窗口控制、流量控制、拥塞控制实现可靠性。
        https://www.jianshu.com/p/6aac4b2a9fd7

    TCP的握手、挥手机制？
        https://blog.csdn.net/zengrenyuan/article/details/80313449

    TCP的粘包/拆包原因及其解决方法是什么？
        TCP是基于字节流的，虽然应用层和TCP传输层之间的数据交互是大小不等的数据块，但是TCP把这些数据块仅仅看成一连串无结构的字节流，没有边界。另外从TCP的帧结构也可以看出，在TCP的首部没有表示数据长度的字段。常见的发生原因：
            要发送的数据大于TCP发送缓冲区剩余空间大小，将会发生拆包。
            待发送数据大于MSS（最大报文长度），TCP在传输前将进行拆包。
            要发送的数据小于TCP发送缓冲区的大小，TCP将多次写入缓冲区的数据一次发送出去，将会发生粘包。
            接收数据端的应用层没有及时读取接收缓冲区中的数据，将发生粘包。
        解决问题的关键在于如何给每个数据包添加边界信息，常用的方法如下：
            发送端给每个数据包添加包首部，首部中应该至少包含数据包的长度，这样接收端在接收到数据后，通过读取包首部的长度字段，便知道每一个数据包的实际长度了。
            发送端将每个数据包封装为固定长度（不够的可以通过补0填充），这样接收端每次从接收缓冲区中读取固定长度的数据就自然而然的把每个数据包拆分开来。
            可以在数据包之间设置边界，如添加特殊符号，这样，接收端通过这个边界就可以将不同的数据包拆分开。

    Netty的粘包/拆包是怎么处理的，有哪些实现？
        消息定长，报文大小固定长度，不够空格补全，发送和接收方遵循相同的约定，这样即使粘包了通过接收方编程实现获取定长报文也能区分。
        包尾添加特殊分隔符，例如每条报文结束都添加回车换行符（例如FTP协议）或者指定特殊字符作为报文分隔符，接收方通过特殊分隔符切分报文区分。
        将消息分为消息头和消息体，消息头中包含表示信息的总长度（或者消息体长度）的字段
        https://www.cnblogs.com/sidesky/p/6913109.html

    同步与异步、阻塞与非阻塞的区别？
        同步：发出一个功能调用时，在没有得到结果之前，该调用就不返回。也就是必须一件一件事做,等前一件做完了才能做下一件事。例如普通B/S模式（同步）：提交请求->等待服务器处理->处理完毕返回 这个期间客户端浏览器不能干任何事。
        异步：当一个异步过程调用发出后，调用者不能立刻得到结果。实际处理这个调用的部件在完成后，通过状态、通知和回调来通知调用者。例如 ajax请求（异步）: 请求通过事件触发->服务器处理（这是浏览器仍然可以作其他事情）->处理完毕
        阻塞：阻塞调用是指调用结果返回之前，当前线程会被挂起（线程进入非可执行状态，在这个状态下，cpu不会给线程分配时间片，即线程暂停运行）。函数只有在得到结果之后才会返回。有人也许会把阻塞调用和同步调用等同起来，实际上他是不同的。对于同步调用来说，很多时候当前线程还是激活的，只是从逻辑上当前函数没有返回,它还会抢占cpu去执行其他逻辑，也会主动检测io是否准备好。
        非阻塞：指在不能立刻得到结果之前，该函数不会阻塞当前线程，而会立刻返回。

    说说网络IO模型？
        网络IO的本质是socket的读取，socket在linux系统被抽象为流，IO可以理解为对流的操作。
            阻塞IO（bloking IO）
            非阻塞IO（non-blocking IO）
            多路复用IO（multiplexing IO）
            信号驱动式IO（signal-driven IO）
            异步IO（asynchronous IO）
            https://www.jianshu.com/p/a95bcb116765

    BIO. NIO. AIO分别是什么？
        BIO：同步并阻塞，服务器实现模式为一个连接一个线程，即客户端有连接请求时服务器端就需要启动一个线程进行处理，如果这个连接不做任何事情会造成不必要的线程开销，当然可以通过线程池机制改善。BIO方式适用于连接数目比较小且固定的架构，这种方式对服务器资源要求比较高，并发局限于应用中，JDK1.4以前的唯一选择，但程序直观简单易理解。
        NIO：同步非阻塞，服务器实现模式为一个请求一个线程，即客户端发送的连接请求都会注册到多路复用器上，多路复用器轮询到连接有I/O请求时才启动一个线程进行处理。NIO方式适用于连接数目多且连接比较短（轻操作）的架构，比如聊天服务器，并发局限于应用中，编程比较复杂，JDK1.4开始支持。
        AIO：异步非阻塞，服务器实现模式为一个有效请求一个线程，客户端的I/O请求都是由OS先完成了再通知服务器应用去启动线程进行处理.AIO方式使用于连接数目多且连接比较长（重操作）的架构，比如相册服务器，充分调用OS参与并发操作，编程比较复杂，JDK7开始支持。

    select. poll. epoll的机制及其区别？
        https://www.cnblogs.com/aspirant/p/9166944.html

    说说你对Netty的了解？
    Netty跟Java NIO有什么不同，为什么不直接使用JDK NIO类库？
        NIO的类库和API繁杂，使用麻烦，你需要熟练掌握Selector,ServerSocketChannel、SocketChannel、ByteBuffer等。
        需要具备其他的额外技能做铺垫，例如熟悉Java多线程编程。这是因为NIO编程涉及到Reactor模式，你必须对多线程和网络编程非常熟悉，才能写出高质量的NIO程序。
        可靠性能力补齐，工作量和难度非常大。例如客户端面临断连重连、网络闪断、半包读写、失败缓存、网络拥塞和异常码流的处理等问题，NIO编程的特点是功能开发相对容易，但是可靠性能力补齐的工作量和难度都非常大。
        JDK NIO的BUG，例如epoll bug，它会导致Selector空轮询，最终导致CPU 100%。官方验证例子基于以上原因，在大多数场景下，不建议直接使用JDK的NIO类库，除非你精通NIO编程或者有特殊的需求。在绝大多数的业务场景中，我们可以使用NIO框架Netty来进行NIO编程，它既可以作为客户端也可以作为服务端，同时支持UDP和异步文件传输，功能非常强大。
        Netty特性总结如下：
        API使用简单，开发门槛低
        功能强大，预置了多种编解码功能，支持多种主流协议
        定制能力强，可以通过ChannelHandler对通信框架进行灵活地扩展
        性能高，通过与其他业界主流的NIO框架对比，Netty的综合性能最优
        成熟、稳定，Netty修复了已经发现的所有JDK NIO BUG，业务开发人员不需要再为NIO的BUG而烦恼
        社区活跃，版本迭代周期短，发现的BUG可以被及时修复，同时更多的新功能会加入
        经历了大规模的商业应用考验，质量得到验证。
        https://www.520mwx.com/view/20451

    Netty组件有哪些，分别有什么关联？
        Channel
            基础的IO操作，如绑定、连接、读写等都依赖于底层网络传输所提供的原语，在Java的网络编程中，基础核心类是Socket，而Netty的Channel提供了一组API，极大地简化了直接与Socket进行操作的复杂性，并且Channel是很多类的父类，如EmbeddedChannel、LocalServerChannel、NioDatagramChannel、NioSctpChannel、NioSocketChannel等。
        EventLoop
            EventLoop定义了处理在连接过程中发生的事件的核心抽象，之后会进一步讨论，其中Channel、EventLoop、Thread和EventLoopGroup之间的关系如下图所示：
        ChannelHandler和ChannelPipeline
            从应用开发者看来，ChannelHandler是最重要的组件，其中存放用来处理进站和出站数据的用户逻辑。ChannelHandler的方法被网络事件触发，ChannelHandler可以用于几乎任何类型的操作，如将数据从一种格式转换为另一种格式或处理抛出的异常。例如，其子接口ChannelInboundHandler，接受进站的事件和数据以便被用户定义的逻辑处理，或者当响应所连接的客户端时刷新ChannelInboundHandler的数据。
            ChannelPipeline为ChannelHandler链提供了一个容器并定义了用于沿着链传播入站和出站事件流的API。当创建Channel时，会自动创建一个附属的ChannelPipeline。
        Bootstrap 和 ServerBootstrap
            Netty的引导类应用程序网络层配置提供容器，其涉及将进程绑定到给定端口或连接一个进程到在指定主机上指定端口上运行的另一进程。引导类分为客户端引导Bootstrap和服务端引导ServerBootstrap。
            https://www.cnblogs.com/leesf456/p/6831661.html

    说说Netty的执行流程？
        创建ServerBootStrap实例
        设置并绑定Reactor线程池：EventLoopGroup，EventLoop就是处理所有注册到本线程的Selector上面的Channel
        设置并绑定服务端的channel
        创建处理网络事件的ChannelPipeline和handler，网络时间以流的形式在其中流转，handler完成多数的功能定制：比如编解码 SSl安全认证
        绑定并启动监听端口
        当轮训到准备就绪的channel后，由Reactor线程：NioEventLoop执行pipline中的方法，最终调度并执行channelHandler

高级
    Netty高性能体现在哪些方面？
        传输：IO模型在很大程度上决定了框架的性能，相比于bio，netty建议采用异步通信模式，因为nio一个线程可以并发处理N个客户端连接和读写操作，这从根本上解决了传统同步阻塞IO一连接一线程模型，架构的性能、弹性伸缩能力和可靠性都得到了极大的提升。正如代码中所示，使用的是NioEventLoopGroup和NioSocketChannel来提升传输效率。
        协议：采用什么样的通信协议，对系统的性能极其重要，netty默认提供了对Google Protobuf的支持，也可以通过扩展Netty的编解码接口，用户可以实现其它的高性能序列化框架。
        线程：netty使用了Reactor线程模型，但Reactor模型不同，对性能的影响也非常大，下面介绍常用的Reactor线程模型有三种，分别如下：
        Reactor单线程模型：单线程模型的线程即作为NIO服务端接收客户端的TCP连接，又作为NIO客户端向服务端发起TCP连接，即读取通信对端的请求或者应答消息，又向通信对端发送消息请求或者应答消息。理论上一个线程可以独立处理所有IO相关的操作，但一个NIO线程同时处理成百上千的链路，性能上无法支撑，即便NIO线程的CPU负荷达到100%，也无法满足海量消息的编码、解码、读取和发送，又因为当NIO线程负载过重之后，处理速度将变慢，这会导致大量客户端连接超时，超时之后往往会进行重发，这更加重了NIO线程的负载，最终会导致大量消息积压和处理超时，NIO线程会成为系统的性能瓶颈。
        Reactor多线程模型：有专门一个NIO线程用于监听服务端，接收客户端的TCP连接请求；网络IO操作(读写)由一个NIO线程池负责，线程池可以采用标准的JDK线程池实现。但百万客户端并发连接时，一个nio线程用来监听和接受明显不够，因此有了主从多线程模型。
        主从Reactor多线程模型：利用主从NIO线程模型，可以解决1个服务端监听线程无法有效处理所有客户端连接的性能不足问题，即把监听服务端，接收客户端的TCP连接请求分给一个线程池。因此，在代码中可以看到，我们在server端选择的就是这种方式，并且也推荐使用该线程模型。在启动类中创建不同的EventLoopGroup实例并通过适当的参数配置，就可以支持上述三种Reactor线程模型。

    Netty的线程模型是怎么样的？
        https://segmentfault.com/a/1190000015484187#articleHeader2

    Netty的零拷贝提体现在哪里，与操作系统上的有什么区别？
        Zero-copy就是在操作数据时, 不需要将数据buffer从一个内存区域拷贝到另一个内存区域。 少了一次内存的拷贝,CPU的效率就得到的提升。在OS层面上的Zero-copy 通常指避免在 用户态(User-space) 与 内核态(Kernel-space)之间来回拷贝数据。Netty的Zero-copy完全是在用户态(Java 层面)的, 更多的偏向于优化数据操作。
            Netty的接收和发送ByteBuffer采用DIRECT BUFFERS，使用堆外直接内存进行Socket读写，不需要进行字节缓冲区的二次拷贝。如果使用传统的堆内存（HEAP BUFFERS）进行Socket读写，JVM会将堆内存Buffer拷贝一份到直接内存中，然后才写入Socket中。相比于堆外直接内存，消息在发送过程中多了一次缓冲区的内存拷贝。
            Netty提供了组合Buffer对象，可以聚合多个ByteBuffer对象，用户可以像操作一个Buffer那样方便的对组合Buffer进行操作，避免了传统通过内存拷贝的方式将几个小Buffer合并成一个大的Buffer。
            Netty的文件传输采用了transferTo方法，它可以直接将文件缓冲区的数据发送到目标Channel，避免了传统通过循环write方式导致的内存拷贝问题。
            https://www.jianshu.com/p/a199ca28e80d
    Netty的内存池是怎么实现的？
        https://www.jianshu.com/p/8d894e42b6e6

    Netty的对象池是怎么实现的？
        https://www.jianshu.com/p/3bfe0de2b022